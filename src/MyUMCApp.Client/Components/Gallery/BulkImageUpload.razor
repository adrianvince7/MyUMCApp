@using MyUMCApp.Client.Services
@using MyUMCApp.Shared.Models
@inject IGalleryService GalleryService
@inject IJSRuntime JSRuntime

<div class="bulk-upload @(_isDragging ? "dragging" : "")"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave"
     @ondragover:preventDefault
     @ondrop="HandleDrop">
    
    <div class="upload-zone">
        @if (_files.Any())
        {
            <div class="selected-files">
                @foreach (var file in _files)
                {
                    <div class="file-item">
                        @if (file.IsImage)
                        {
                            <div class="file-preview">
                                <img src="@file.PreviewUrl" alt="@file.File.Name" />
                            </div>
                        }
                        <div class="file-info">
                            <div class="file-name">@file.File.Name</div>
                            <div class="file-size">@FormatFileSize(file.File.Size)</div>
                            <div class="file-metadata">
                                <input type="text" 
                                       placeholder="Description"
                                       @bind="file.Description" />
                                <input type="text" 
                                       placeholder="Tags (comma separated)"
                                       @bind="file.TagsInput" />
                            </div>
                            @if (file.UploadProgress.HasValue)
                            {
                                <div class="progress">
                                    <div class="progress-bar" 
                                         style="width: @(file.UploadProgress)%">
                                        @file.UploadProgress%
                                    </div>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(file.Error))
                            {
                                <div class="text-danger">@file.Error</div>
                            }
                        </div>
                        <button class="btn btn-link text-danger" 
                                @onclick="() => RemoveFile(file)">
                            Remove
                        </button>
                    </div>
                }
            </div>
            
            <div class="upload-actions">
                <button class="btn btn-primary" 
                        @onclick="StartUpload" 
                        disabled="@(_isUploading || !_files.Any())">
                    @if (_isUploading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Upload @_files.Count Files</span>
                    }
                </button>
                <button class="btn btn-secondary" 
                        @onclick="ClearFiles"
                        disabled="@_isUploading">
                    Clear All
                </button>
            </div>
        }
        else
        {
            <div class="upload-prompt">
                <i class="bi bi-cloud-upload"></i>
                <h3>Drag and drop images here</h3>
                <p>or</p>
                <InputFile OnChange="HandleFileSelection" 
                          accept="image/*" 
                          multiple 
                          class="d-none" 
                          @ref="_fileInput" />
                <button class="btn btn-outline-primary"
                        @onclick="() => _fileInput.Element?.Click()">
                    Browse Files
                </button>
                <p class="text-muted mt-2">
                    Supported formats: JPG, PNG, GIF, WebP<br />
                    Maximum file size: 10MB
                </p>
            </div>
        }
    </div>

    @if (_uploadedFiles.Any())
    {
        <div class="upload-results mt-4">
            <h4>Upload Results</h4>
            <div class="results-grid">
                @foreach (var file in _uploadedFiles)
                {
                    <div class="result-item">
                        <img src="@file.ThumbnailUrl" alt="@file.FileName" />
                        <div class="result-info">
                            <div class="result-name">@file.FileName</div>
                            <div class="result-stats">
                                @if (file.CompressionStats != null)
                                {
                                    <small>
                                        Compressed: @(Math.Round(file.CompressionStats.CompressionRatio * 100, 1))%
                                        (@FormatFileSize(file.CompressionStats.CompressedSize))
                                    </small>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Guid GalleryId { get; set; }
    [Parameter] public EventCallback<List<ImageMetadata>> OnUploadComplete { get; set; }

    private InputFile _fileInput = new();
    private bool _isDragging;
    private bool _isUploading;
    private readonly List<UploadFile> _files = new();
    private readonly List<ImageMetadata> _uploadedFiles = new();
    private const int MaxFileSize = 10 * 1024 * 1024; // 10MB
    private readonly string[] AllowedTypes = { "image/jpeg", "image/png", "image/gif", "image/webp" };

    private void HandleDragEnter(DragEventArgs e) => _isDragging = true;
    private void HandleDragLeave(DragEventArgs e) => _isDragging = false;

    private async Task HandleDrop(DragEventArgs e)
    {
        _isDragging = false;
        if (e.DataTransfer.Files.Count == 0) return;

        await ProcessFiles(e.DataTransfer.Files);
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        await ProcessFiles(e.GetMultipleFiles());
    }

    private async Task ProcessFiles(IEnumerable<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (file.Size > MaxFileSize)
            {
                continue; // Skip files that are too large
            }

            if (!AllowedTypes.Contains(file.ContentType))
            {
                continue; // Skip unsupported file types
            }

            var uploadFile = new UploadFile(file);
            
            try
            {
                // Generate preview
                var previewStream = await file.OpenReadStream(MaxFileSize).ReadAsStreamAsync();
                var buffer = new byte[previewStream.Length];
                await previewStream.ReadAsync(buffer);
                uploadFile.PreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                uploadFile.IsImage = true;
            }
            catch
            {
                uploadFile.IsImage = false;
            }

            _files.Add(uploadFile);
        }
    }

    private void RemoveFile(UploadFile file)
    {
        _files.Remove(file);
    }

    private void ClearFiles()
    {
        _files.Clear();
        _uploadedFiles.Clear();
    }

    private async Task StartUpload()
    {
        if (_isUploading) return;

        try
        {
            _isUploading = true;
            var batch = new List<FileUploadRequest>();
            var batchSize = 5;
            var currentBatch = 0;

            while (currentBatch * batchSize < _files.Count)
            {
                batch.Clear();
                var filesToUpload = _files
                    .Skip(currentBatch * batchSize)
                    .Take(batchSize)
                    .ToList();

                foreach (var file in filesToUpload)
                {
                    var stream = await file.File.OpenReadStream(MaxFileSize).ReadAsStreamAsync();
                    batch.Add(new FileUploadRequest(
                        stream,
                        file.File.Name,
                        file.File.ContentType,
                        file.Description,
                        file.Tags
                    ));
                }

                var uploadedFiles = await GalleryService.UploadImagesAsync(GalleryId, batch);
                _uploadedFiles.AddRange(uploadedFiles);

                // Update progress
                foreach (var file in filesToUpload)
                {
                    file.UploadProgress = 100;
                }

                currentBatch++;
                await Task.Delay(100); // Small delay between batches
            }

            await OnUploadComplete.InvokeAsync(_uploadedFiles);
        }
        catch (Exception ex)
        {
            foreach (var file in _files)
            {
                file.Error = "Upload failed";
            }
            Console.Error.WriteLine($"Upload error: {ex}");
        }
        finally
        {
            _isUploading = false;
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private class UploadFile
    {
        public IBrowserFile File { get; }
        public string? PreviewUrl { get; set; }
        public bool IsImage { get; set; }
        public string? Description { get; set; }
        public string? TagsInput { get; set; }
        public List<string> Tags => TagsInput?
            .Split(',')
            .Select(t => t.Trim())
            .Where(t => !string.IsNullOrEmpty(t))
            .ToList() ?? new List<string>();
        public double? UploadProgress { get; set; }
        public string? Error { get; set; }

        public UploadFile(IBrowserFile file)
        {
            File = file;
        }
    }
}

<style>
    .bulk-upload {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 2rem;
        transition: all 0.2s;
    }

    .bulk-upload.dragging {
        border-color: #7b1fa2;
        background-color: rgba(123, 31, 162, 0.05);
    }

    .upload-zone {
        min-height: 200px;
    }

    .upload-prompt {
        text-align: center;
        color: #6c757d;
    }

    .upload-prompt i {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .selected-files {
        display: grid;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .file-item {
        display: flex;
        align-items: start;
        gap: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .file-preview {
        width: 100px;
        height: 100px;
        border-radius: 4px;
        overflow: hidden;
        flex-shrink: 0;
    }

    .file-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .file-info {
        flex: 1;
    }

    .file-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .file-size {
        color: #6c757d;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .file-metadata {
        display: grid;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .file-metadata input {
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        border: 1px solid #dee2e6;
        border-radius: 4px;
    }

    .progress {
        height: 4px;
        margin-top: 0.5rem;
    }

    .upload-results {
        border-top: 1px solid #dee2e6;
        padding-top: 1.5rem;
    }

    .results-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .result-item {
        background-color: #f8f9fa;
        border-radius: 4px;
        overflow: hidden;
    }

    .result-item img {
        width: 100%;
        aspect-ratio: 1;
        object-fit: cover;
    }

    .result-info {
        padding: 0.75rem;
    }

    .result-name {
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .result-stats {
        font-size: 0.75rem;
        color: #6c757d;
    }
</style> 