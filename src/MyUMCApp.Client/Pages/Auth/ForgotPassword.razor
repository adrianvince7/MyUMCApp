@page "/forgot-password"
@using MyUMCApp.Client.Models
@using MyUMCApp.Client.Services
@inject IApiAuthService AuthService
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-form">
        <h2>Forgot Password</h2>
        
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger">
                @_errorMessage
            </div>
        }
        
        @if (_isSuccess)
        {
            <div class="alert alert-success">
                Password reset instructions have been sent to your email. Please check your inbox.
                <br /><br />
                <strong>Note:</strong> For demonstration purposes, the reset token will be logged to the server console.
            </div>
        }
        else
        {
            <EditForm Model="@_forgotPasswordRequest" OnValidSubmit="HandleForgotPasswordAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="_forgotPasswordRequest.Email" />
                    <ValidationMessage For="@(() => _forgotPasswordRequest.Email)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </div>

                <div class="auth-links">
                    <a href="/login">Back to Login</a>
                    <a href="/reset-password">Have a reset token? Reset password here</a>
                </div>
            </EditForm>
        }
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
    }

    .auth-form {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .auth-links {
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .auth-links a {
        color: #007bff;
        text-decoration: none;
    }

    .auth-links a:hover {
        text-decoration: underline;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
    }

    .alert {
        margin-bottom: 1rem;
        padding: 0.75rem;
        border-radius: 4px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }
</style>

@code {
    private ForgotPasswordRequest _forgotPasswordRequest = new();
    private bool _isLoading;
    private bool _isSuccess;
    private string? _errorMessage;

    private async Task HandleForgotPasswordAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;

            var response = await AuthService.ForgotPasswordAsync(_forgotPasswordRequest);

            if (response.Success)
            {
                _isSuccess = true;
            }
            else
            {
                _errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }
} 