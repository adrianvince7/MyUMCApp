@page "/reset-password"
@using MyUMCApp.Shared.Models.Auth
@using MyUMCApp.Shared.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-form">
        <h2>Reset Password</h2>
        
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger">
                @_errorMessage
            </div>
        }
        
        @if (_isSuccess)
        {
            <div class="alert alert-success">
                Your password has been reset successfully. You can now <a href="/login">login</a> with your new password.
            </div>
        }
        else
        {
            <EditForm Model="@_resetPasswordRequest" OnValidSubmit="HandleResetPasswordAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="_resetPasswordRequest.Email" />
                    <ValidationMessage For="@(() => _resetPasswordRequest.Email)" />
                </div>

                <div class="form-group">
                    <label for="confirmationCode">Confirmation Code</label>
                    <InputText id="confirmationCode" class="form-control" @bind-Value="_resetPasswordRequest.ConfirmationCode" />
                    <ValidationMessage For="@(() => _resetPasswordRequest.ConfirmationCode)" />
                    <small class="form-text text-muted">Enter the confirmation code sent to your email.</small>
                </div>

                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <InputText type="password" id="newPassword" class="form-control" @bind-Value="_resetPasswordRequest.NewPassword" />
                    <ValidationMessage For="@(() => _resetPasswordRequest.NewPassword)" />
                    <small class="form-text text-muted">
                        Password must be at least 8 characters long and contain:
                        <ul>
                            <li>At least one uppercase letter</li>
                            <li>At least one lowercase letter</li>
                            <li>At least one number</li>
                            <li>At least one special character</li>
                        </ul>
                    </small>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="_resetPasswordRequest.ConfirmPassword" />
                    <ValidationMessage For="@(() => _resetPasswordRequest.ConfirmPassword)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </div>

                <div class="auth-links">
                    <a href="/login">Back to Login</a>
                </div>
            </EditForm>
        }
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
    }

    .auth-form {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .auth-links {
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .auth-links a {
        color: #007bff;
        text-decoration: none;
    }

    .auth-links a:hover {
        text-decoration: underline;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
    }

    .alert {
        margin-bottom: 1rem;
        padding: 0.75rem;
        border-radius: 4px;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .form-text ul {
        margin-top: 0.5rem;
        margin-bottom: 0;
        padding-left: 1.25rem;
    }
</style>

@code {
    private ResetPasswordRequest _resetPasswordRequest = new();
    private bool _isLoading;
    private bool _isSuccess;
    private string? _errorMessage;

    private async Task HandleResetPasswordAsync()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;

            var response = await AuthService.ResetPasswordAsync(_resetPasswordRequest);

            if (response.Successful)
            {
                _isSuccess = true;
            }
            else
            {
                _errorMessage = response.Message ?? "An error occurred while resetting your password.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }
} 