@page "/events"
@using MudBlazor
@using MudBlazor.Components.Calendar
@using MyUMCApp.Shared.Models
@using MyUMCApp.Client.Services
@using MyUMCApp.Client.ViewModels
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject IEventService EventService
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Events - United Methodist Church</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Elevation="3">
                <MudCalendar @bind-value:event="oninput" @bind-value="_selectedDate"
                            Events="@_calendarEvents"
                            EventClick="@EventClick"
                            Class="rounded-lg" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Upcoming Events</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Roles="Administrator,ChurchLeader">
                            <Authorized>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                             Color="Color.Primary" 
                                             OnClick="@(() => OpenEventDialog())" />
                            </Authorized>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Style="max-height: 400px; overflow-y: auto;">
                    @if (_upcomingEvents.Any())
                    {
                        @foreach (var evt in _upcomingEvents)
                        {
                            <MudPaper Class="pa-4 mb-2" Elevation="0">
                                <MudText Typo="Typo.subtitle1" Color="Color.Primary">@evt.Title</MudText>
                                <MudText Typo="Typo.body2">@evt.Description</MudText>
                                <MudText Typo="Typo.caption">@evt.StartDate.ToString("g") - @evt.EndDate.ToString("t")</MudText>
                                <MudText Typo="Typo.caption">
                                    @if (evt.IsVirtual)
                                    {
                                        <span>
                                            Virtual Meeting: 
                                            <MudLink OnClick="@(() => JoinVirtualMeeting(evt.VirtualMeetingUrl))">
                                                Join Meeting
                                            </MudLink>
                                        </span>
                                    }
                                    else
                                    {
                                        <span>Location: @evt.Location</span>
                                    }
                                </MudText>
                                <MudChip Color="@GetEventStatusColor(evt)" Size="Size.Small" Class="mt-2">
                                    @evt.Status
                                </MudChip>
                                <MudStack Row="true" Spacing="2" Class="mt-2">
                                    @if (evt.Status == EventStatus.Published && evt.RequiresRegistration)
                                    {
                                        <MudButton Color="Color.Primary" 
                                                  Variant="Variant.Text" 
                                                  Size="Size.Small"
                                                  OnClick="@(() => RegisterForEvent(evt))">
                                            Register
                                        </MudButton>
                                    }
                                    <MudIconButton Icon="@Icons.Material.Filled.CalendarToday"
                                                 Size="Size.Small"
                                                 OnClick="@(() => AddToCalendar(evt))"
                                                 Title="Add to Calendar" />
                                </MudStack>
                            </MudPaper>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Class="mud-text-align-center">No upcoming events</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private DateTime _selectedDate = DateTime.Today;
    private List<ChurchEvent> _events = new();
    private List<ChurchEvent> _upcomingEvents = new();
    private List<CalendarEvent> _calendarEvents = new();
    private bool _isLoading;
    private IJSObjectReference? _module;
    private DotNetObjectReference<Events>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            await LoadEvents();
        }
        finally
        {
            _isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Events/Events.razor.js");
            _dotNetRef = DotNetObjectReference.Create(this);
            await _module.InvokeVoidAsync("initializeCalendar", _dotNetRef);
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            _events = await EventService.GetEventsAsync();
            _upcomingEvents = _events.Where(e => e.StartDate > DateTime.Now && e.Status == EventStatus.Published)
                                   .OrderBy(e => e.StartDate)
                                   .ToList();
            _calendarEvents = _events.Select(e => new CalendarEvent
            {
                Text = e.Title,
                Start = e.StartDate,
                End = e.EndDate
            }).ToList();

            if (_module != null)
            {
                await _module.InvokeVoidAsync("refreshCalendar");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading events", Severity.Error);
        }
    }

    private async Task EventClick(CalendarEvent calendarEvent)
    {
        var churchEvent = _events.FirstOrDefault(e => e.Title == calendarEvent.Text 
                                                  && e.StartDate == calendarEvent.Start);
        if (churchEvent != null)
        {
            var parameters = new DialogParameters
            {
                { "Event", churchEvent }
            };
            var dialog = await DialogService.ShowAsync<EventDetailsDialog>("Event Details", parameters);
            var result = await dialog.Result;
            
            if (!result.Cancelled)
            {
                await LoadEvents();
            }
        }
    }

    private Color GetEventStatusColor(ChurchEvent evt)
    {
        return evt.Status switch
        {
            EventStatus.Draft => Color.Default,
            EventStatus.Published => Color.Success,
            EventStatus.Cancelled => Color.Error,
            EventStatus.Completed => Color.Info,
            _ => Color.Default
        };
    }

    private async Task RegisterForEvent(ChurchEvent evt)
    {
        try
        {
            await EventService.RegisterForEventAsync(evt.Id);
            
            if (_module != null)
            {
                await _module.InvokeVoidAsync("showEventNotification", 
                    "Event Registration",
                    $"Successfully registered for {evt.Title}");
            }

            await NotificationService.SendNotificationAsync(
                "Event Registration",
                $"Successfully registered for {evt.Title}",
                NotificationType.Event
            );
            
            Snackbar.Add($"Successfully registered for {evt.Title}", Severity.Success);
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error registering for event", Severity.Error);
        }
    }

    private async Task OpenEventDialog()
    {
        var dialog = await DialogService.ShowAsync<EventCreateDialog>("Create Event");
        var result = await dialog.Result;
        
        if (!result.Cancelled)
        {
            await LoadEvents();
        }
    }

    private async Task JoinVirtualMeeting(string url)
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("joinVirtualMeeting", url);
        }
    }

    private async Task AddToCalendar(ChurchEvent evt)
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("addToCalendar", evt);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module != null)
            {
                await _module.DisposeAsync();
            }
            
            _dotNetRef?.Dispose();
        }
        catch (Exception)
        {
            // Handle or log any disposal errors
        }
    }
} 